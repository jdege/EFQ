@page
@model JDege.EFQ.Web.Pages.DynamicQueryModel
@{
}

<p>
    This is a collection of simple demos exploring the motivation behind and the use of
    <a href="https://github.com/jdege/EFQ">EFQ</a> -
    a class designed to allow Entity Framework queries to be constructed dynamically in code,
    and to be serialized in whole and in part for storage in databases, passed between client
    and server, etc.
</p>
<p>
    The source code is available on GitHub: <a href="https://github.com/jdege/EFQ">EFQ</a>.
</p>
<p>
    These demos run against a copy of the <a href="https://github.com/lerocha/chinook-database" )>Chinook</a> database:
</p>
<img src="images/Chinook_Erd.png" alt="Chinook DB ERD" />

<p>
    The task we're addressing, in the initial demos, is presenting the user with a query
    form in which the user can choose a Customer and/or an Artist from select lists, click "Search",
    and see a table containing information about the Tracks associated with the selected Client, Aorker,
    or both.
</p>
<p>
    The problem is building a query that might contain a comparison against CustomerId, might contain a
    comparison against ArtistId, or might contain both.
</p>
<p>
    The Demos:
<ol>
    <li><a asp-controller="ADO">Simple ADO</a> - When using ADO, a query is simply a string containing SQL</li>

    <li><a asp-controller="PlainEF">Plain Entity Framework</a> - With EF, in the simple case you can build up a query
        using
        IQueryable obects.</li>
    <li>
        <a asp-controller="PredicateBuilder">Predicate Builder</a> -
        Pete Montgomery's <a
            href="https://petemontgomery.wordpress.com/2011/02/10/a-universal-predicatebuilder/">PredicateBuilder</a>
        will allow you to construct a query from pieces in more complicated ways that using plain EF.
    </li>
    <li>
        <a asp-controller="EFQuery">EFQuery</a> -
        EFQuery wraps PredicateBuilder, and when used directly works much the same way.
    </li>
    <li>
        <a asp-controller="EFQOnServer">EFQuery on server</a> - EFQuery allows you to create partial
        queries and combine the separately. Here we're combining them on the server.
    </li>
    <li>
        <a href="EFQueryOnClient">EFQuery on client</a> -EFQuery allows you to create partial
        queries and combine the separately. Here we're combining them on the client.
    </li>
</ol>
</p>
