@page
@model JDege.EFQ.Web.Pages.IndexModel
@{
    ViewData["Title"] = "Home";
}

<h1>EFQ</h1>
<h2>Serializable Entity Framework Queries</h2>

<p>EFQ is a .NET 5.0 library to enable serializing Entity Framework queries.<br>
    The code can be found on GitHub, at <a href="https://github.com/jdege/EFQ">https://github.com/jdege/EFQ</a></p>

<p>When we started working with Entity Framework, there were two functionalities
    we had been using that EF, out of the box, did not support:</p>

<ul>
    <li>Constructing a query dynmically on a web page and submitting it to a webservice, and</li>
    <li>Storing a query in the database.</li>
</ul>

<p>Both of these are pretty simple to do in SQL, and we wanted to be able to do something
    similar using Entity Framework.</p>

<p>The menu at the top of this site provides links to a number of different pages:</p>

<ol>
    <li><a class="nav-link text-dark" asp-controller="DatabaseConfiguration" asp-action="Index">Database
            configuration</a>
        An explanation of the database that these demos run against.
    </li>

    <li><a class="nav-link text-dark" asp-controller="MotivationalExercises" asp-action="Index">Motivational
            exercises</a>
        A progressive series of tutorials explaining the why and how of EFQ.
    </li>

    <li><a class="nav-link text-dark" asp-controller="FieldMatch" asp-action="Index">Field matching</a>
        A page that retrieves and displays a collection of queries against a base database table,
        and allows the user to execute any selected query. The queries in the collection act
        as tutorial examples of the various functions available.
    </li>

    <li><a class="nav-link text-dark" asp-controller="NavigationProperty" asp-action="Index">Navigation
            properties</a>
        Queries that match against tables that are connected to the base table - connecting
        through Entity Framework navigation properties.
    </li>

    <li><a class="nav-link text-dark" asp-controller="ParameterizedValues" asp-action="Index">Parameterized
            values</a>
        Storing queries in the database serves little purpose if you can't set parameters when they're run.
    </li>

    <li><a class=" nav-link text-dark" href="/Swagger" target="_blank">Swagger UI</a>
        The Swagger UI for the REST endpoints in this project (opens in a new browser tab) </li>
</ol>

<p>There are four .NET projects, in this solution:</p>

<ol>
    <li><b>EFQ</b> - the EFQ library itself</li>
    <li><b>EFQ.test</b> - an XUnit test suite, running unit tests that do not have any external dependencies.</li>
    <li><b>EFQ.dbtest</b> - an XUnit test suite, running tests against a local SQLite database.</li>
    <li><b>EFQ.Web</b> - a aspnet core website, with demonstration pages running against a SqlServer database.</li>
</ol>

<p>This, of course, is the EFQ.Web home page.</p>

<!-- TODO: This is where I should explain the PostMan collection, when I have written it. -->

<!-- TODO: Do some CSS styling on the pages-->
