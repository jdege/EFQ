@page

<partial name="_DemoMenu" />

<p>
    This is a collection of simple demos exploring the motivation behind and the use of
    <a href="https://github.com/jdege/EFQ">EFQ</a> -
    a class designed to allow Entity Framework queries to be constructed dynamically in code,
    and to be serialized in whole and in part for storage in databases, passed between client
    and server, etc.
</p>
<p>
    The task we're addressing, in these demos, is presenting the user with a
    form in which the user can select among multiple items to construct the query.
</p>
<p>
    The Demos:
<ol>
    <li><a asp-controller="DatabaseConfiguration">Database Configuration</a>
        - Information about the database that these demos run against.</li>

    <li><a asp-controller="SqlStatement">Sql Statements</a> - When using ADO, a query is simply a string containing SQL,
        which we can build up using string concatenation.</li>

    <li><a asp-controller="PlainEF">Plain Entity Framework</a> - With EF, in the simple case you can build up a query
        using
        IQueryable obects.</li>
    <li>
        <a asp-controller="PredicateBuilder">Predicate Builder</a> -
        Pete Montgomery's <a
            href="https://petemontgomery.wordpress.com/2011/02/10/a-universal-predicatebuilder/">PredicateBuilder</a>
        will allow you to construct a query from pieces in more complicated ways that using plain EF.
    </li>
    <li>
        <a asp-controller="EFQuery">EFQ</a> -
        EFQ wraps PredicateBuilder, and when used directly works much the same way.
    </li>
    <li>
        <a asp-controller="EFQOnServer">EFQ on server</a> - EFQ allows you to create partial
        queries and combine them separately. Here we're combining them on the server.
    </li>
    <li>
        <a asp-controller="EFQOnClient">EFQ on client</a> -EFQ allows you to create partial
        queries and combine them separately. Here we're combining them on the client.
    </li>
</ol>
</p>
