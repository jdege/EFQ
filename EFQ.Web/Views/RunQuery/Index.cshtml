@model JDege.EFQ.Web.Models.RunQueryModel
@using System.Text.Json

@{
    ViewData["Title"] = "Index";
    bool displayForm = (Model.Parameters != null && (Model.Parameters.Count() > 0));
}

<h3>@Model.Title</h3>

<div class="container">
    @Html.Raw(Model.Description)
</div>

<h4>The query we're running:</h4>
<div class="container">
    @Html.Raw(Model.Query)
</div>

<a asp-controller=@Model.ReturnController asp-action="Index">Return to list</a>

@if (displayForm)
{
    <div class="container">
    @using (Html.BeginForm(FormMethod.Post, new { id = "criteriaForm" }))
        {
            <h4>Search Criteria</h4>

            <div class="row submitButton col-sm-6">
                <input id="Submit" type="button" value="Search" class="btn btn-primary" />
            </div>
        }
    </div>
}

<div id="results" class="tab-pane fade show @ViewBag.resultsActive">
    <h3>Results</h3>
    <div class="container" id="TracksContainer">
        <table id="TracksTable" class="col-sm-12">
        </table>
    </div>
    <div class="container" id="InvoicesContainer">
        <table id="InvoicesTable" class="col-sm-12">
        </table>
    </div>
</div>

@section Css {
}

@section Scripts {

<script src="~/efq/EFQ.js"></script>

<script type="text/javascript">
    debugger;
    var model = @Html.Raw(@JsonSerializer.Serialize(@Model));
    var displayForm = model.Parameters != null && model.Parameters.length > 0;

    var $submitButton = $("#Submit");
    var $criteriaForm;

    if (displayForm)
    {
        $criteriaForm = $("#criteriaForm");

        model.Parameters.forEach(element =>
        {
            var name = element.Name;
            var key = element.Key;
            var type = element.Type;
            var dropdownUrl = element.DropdownUrl;

            var $row = $("<div>", { "class": "row" });

            var $label = $("<div>", { "class": "col-sm-3" }).text(name + ":");
            $row.append($label);

            if (dropdownUrl)
            {
                var $select = $("<select>", { "class": "col-sm-3" })
                    .data("key", key)
                    .data("dropdownUrl", dropdownUrl);
                $row.append($select);
                $criteriaForm.find(".submitButton").before($row);
            }
            else if (type === "DATE")
            {
                var $input = $("<input>", { name: key, type: "date", class: "col-sm-3" }).data("type", "DATE");

                $row.append($input);
                $criteriaForm.find(".submitButton").before($row);
            }
            else if (type === "STRING")
            {
                var $input = $("<input>", { name: key, class: "col-sm-3" }).data("type", "STRING");

                $row.append($input);
                $criteriaForm.find(".submitButton").before($row);
            }

        });

        // TODO: Use lambda expressions in JavaScript
        $criteriaForm.keypress((e) =>
        {
            if (e.which === 13)
            {
                e.preventDefault();
                $submitButton.click();
            }
        });
    }

    var $tracksTable = $("#TracksTable").DataTable({
        paging: false,
        ordering: false,
        info: false,
        searching: false,
        data: [],
        columns: [
            { title: "TrackName", data: "trackName" },
            { title: "AlbumTitle", data: "albumTitle" },
            { title: "ArtistName", data: "artistName" },
            { title: "TrackComposer", data: "trackComposer" },
            { title: "MediaType", data: "mediaType" },
            {
                title: "Customers",
                data: "customers",
                render: function (data, type, row)
                {
                    var rVal = '';

                    $.each(data, function (index, value)
                    {
                        rVal += value.firstName;
                        rVal += ' '
                        rVal += value.lastName;
                        rVal += '<br>'
                    });

                    return rVal;
                }
            }
        ]
    });

    $("#TracksContainer").hide();

    var $invoicesTable = $("#InvoicesTable").DataTable({
        paging: false,
        ordering: false,
        info: false,
        searching: false,
        data: [],
        columns: [
            { title: "CustomerName", data: "customerName" },
            { title: "InvoiceDate", data: "invoiceDate" },
            { title: "BillingAddress", data: "billingAddress" },
            { title: "BillingCity", data: "billingCity" },
            { title: "BillingState", data: "billingState" },
            { title: "BillingCountry", data: "billingCountry" },
            { title: "BillingPostalCode", data: "billingPostalCode" },
        ]
    });

    $("#InvoicesContainer").hide();

    $("#Submit").click(function (event)
    {
        event.preventDefault();

        var context = {};

        $criteriaForm
            .find("select")
            .each(function (index, element)
            {
                var $element = $(element);
                var $selected = $element.find(':selected');
                var val = $selected.val();
                var key = $element.data("key");

                context[key] = EFQConstant.int(val);
            });

        $criteriaForm
            .find("input")
            .each(function (index, element)
            {
                var $element = $(element);
                var name = $element.attr("name");
                var type = $element.data("type");
                if (type === "DATE")
                {
                    val = $element.val();
                    var key = name;
                    context[key] = EFQConstant.dateTime(val);
                }
                else if (type === "STRING")
                {
                    val = $element.val();
                    var key = name;
                    context[key] = EFQConstant.string(val);
                }
            });

        populateTables(model, context);
    });

    var fillSelect = function ($select, result)
    {
        if (result.success)
        {
            $select.empty().append("<option value=''></option>");
            $.each(result.data, function (index, item)
            {
                $select.append($("<option />").val(item.value || index).text(item.text).data('query', item.query));
            });
        } else
        {
            alert(result.error);
        }
    };

    $(document).ready(function ()
    {
        if (displayForm)
        {
            var $selects = $criteriaForm.find("select");

            $selects.each(function (index, element)
            {
                var $element = $(element);
                var key = $element.data("key");
                var dropdownUrl = $element.data("dropdownUrl");

                DropdownService.getDropdown(dropdownUrl, { includeQueries: true }, function (result)
                {
                    fillSelect($element, result);
                });
            });

            var foo = $selects;
        }
        else
        {
            populateTables(model, null);
        }
    });

    var populateTables = function (model, context)
    {
        if (model.Model === "TrackModel")
        {
            TrackQueryService.storedQuery(model.StoredQueryId, context, function (result)
            {
                if (result.success)
                {
                    var data = result.data;
                    $tracksTable.clear();
                    $tracksTable.rows.add(data);
                    $tracksTable.draw();
                    $("#TracksContainer").show();
                } else
                {
                    alert(result.error);
                }
            });
        }
        if (model.Model === "InvoiceModel")
        {
            InvoiceQueryService.storedQuery(model.StoredQueryId, context, function (result)
            {
                if (result.success)
                {
                    var data = result.data;
                    $invoicesTable.clear();
                    $invoicesTable.rows.add(data);
                    $invoicesTable.draw();
                    $("#InvoicesContainer").show();
                } else
                {
                    alert(result.error);
                }
            });
        }
    }
</script>
}
